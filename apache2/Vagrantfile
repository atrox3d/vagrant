# -*- mode: ruby -*-
# vi: set ft=ruby :


def log(_config, *messages )
	_config.vm.provision "shell", privileged: false, inline: <<-LOG
		_messages=( #{messages.map{|m| "\"#{m}\""}.join(', ')} )
		echo	'################################################################################'
		echo	'#                                                                              #'
		for _message in "${_messages[@]}"
		do
			printf '# %-77.77s#\n' "$_message"
		done
		echo	'#                                                                              #'
		echo	'################################################################################'
	LOG
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
	# The most common configuration options are documented and commented below.
	# For a complete reference, please see the online documentation at
	# https://docs.vagrantup.com.

	# Every Vagrant development environment requires a box. You can search for
	# boxes at https://vagrantcloud.com/search.
	#config.vm.box = "base"
	config.vm.box = "ubuntu/bionic64"
	#
	#
	#
	#log config, 'executing provision/shell/force.bash.color.sh...'
	#config.vm.provision "shell", path: "provision/shell/force.bash.color.sh"
	#
	#
	#
	Dir.glob('provision/shell/*.sh') do |item|
		log config, "SHELL", "esecuzione shell: #{item}"
		config.vm.provision "shell", path: item
	end
	#
	#
	#
	Dir.glob('provision/install/*.sh') do |item|
		log config, "INSTALL", "esecuzione shell: #{item}"
		config.vm.provision "shell", path: item
	end
	#
	#
	#
	log config, 'creazione directory sito test.com'
	config.vm.provision "shell", inline: "mkdir -p /var/www/test.com"
	
	log config, 'upload index.html /tmp'
	config.vm.provision "file", source: "provision/copy/var/www/test.com/index.html", destination: "/tmp/index.html"
	
	log config, 'copia /tmp/index.html /var/www/test.com'
	config.vm.provision "shell", inline: "cp /tmp/index.html /var/www/test.com"
	
	log config, 'upload test.com.conf /tmp'
	config.vm.provision "file", source: "provision/copy/etc/apache2/sites-available/test.com.conf", destination: "/tmp/test.com.conf"

	log config, 'copia /tmp/test.com.conf /etc/apache2/sites-available'
	config.vm.provision "shell", inline: "cp /tmp/test.com.conf /etc/apache2/sites-available"
	
	log config, 'abilitazione sito test.com'
	config.vm.provision "shell", inline: "a2ensite test.com.conf"

	log config, 'reload apache2 config'
	config.vm.provision "shell", inline: "service apache2 reload"
	
	log config, 'aggiungere al file hosts :', '127.0.0.2	test.com'
	#
	log config, 'upload test.com.8081.conf /tmp'
	config.vm.provision "file", source: "provision/copy/etc/apache2/sites-available/test.com.8081.conf", destination: "/tmp/test.com.8081.conf"

	log config, 'copia /tmp/test.com.8081.conf /etc/apache2/sites-available'
	config.vm.provision "shell", inline: "cp /tmp/test.com.8081.conf /etc/apache2/sites-available"
	
	log config, 'abilitazione sito :8081'
	config.vm.provision "shell", inline: "a2ensite test.com.8081.conf"

	log config, 'reload apache2 config'
	config.vm.provision "shell", inline: "service apache2 reload"
	
	# Disable automatic box update checking. If you disable this, then
	# boxes will only be checked for updates when the user runs
	# `vagrant box outdated`. This is not recommended.
	# config.vm.box_check_update = false

	# Create a forwarded port mapping which allows access to a specific port
	# within the machine from a port on the host machine. In the example below,
	# accessing "localhost:8080" will access port 80 on the guest machine.
	# NOTE: This will enable public access to the opened port
	# config.vm.network "forwarded_port", guest: 80, host: 8080
	config.vm.network "forwarded_port", guest: 80,		host: 8080
	config.vm.network "forwarded_port", guest: 8081,	host: 8081

	# Create a forwarded port mapping which allows access to a specific port
	# within the machine from a port on the host machine and only allow access
	# via 127.0.0.1 to disable public access
	# config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

	# Create a private network, which allows host-only access to the machine
	# using a specific IP.
	# config.vm.network "private_network", ip: "192.168.33.10"

	# Create a public network, which generally matched to bridged network.
	# Bridged networks make the machine appear as another physical device on
	# your network.
	# config.vm.network "public_network"

	# Share an additional folder to the guest VM. The first argument is
	# the path on the host to the actual folder. The second argument is
	# the path on the guest to mount the folder. And the optional third
	# argument is a set of non-required options.
	# config.vm.synced_folder "../data", "/vagrant_data"

	# Provider-specific configuration so you can fine-tune various
	# backing providers for Vagrant. These expose provider-specific options.
	# Example for VirtualBox:
	#
	# config.vm.provider "virtualbox" do |vb|
	#   # Display the VirtualBox GUI when booting the machine
	#   vb.gui = true
	#
	#   # Customize the amount of memory on the VM:
	#   vb.memory = "1024"
	# end
	#
	# View the documentation for the provider you are using for more
	# information on available options.

	# Enable provisioning with a shell script. Additional provisioners such as
	# Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
	# documentation for more information about their specific syntax and use.
	# config.vm.provision "shell", inline: <<-SHELL
	#   apt-get update
	#   apt-get install -y apache2
	# SHELL
end
