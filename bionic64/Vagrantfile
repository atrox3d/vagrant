# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
		config.vm.box = "ubuntu/bionic64"
		config.ssh.forward_agent = true
		config.vm.provision "docker"
		config.vm.provision "file", source: "provision/copy/home/vagrant", destination: "/home/vagrant"
		#
		if File.exists?(File.expand_path("~/.gitconfig"))
			puts '~/.gitconfig found, copying on vm'
			config.vm.provision "file", source: File.expand_path("~/.gitconfig"), destination: "~/.gitconfig"
		else
			puts '~/.gitconfig not foundm skipping'
		end
		#
		if File.exists?(File.expand_path("~/.git-credentials"))
			puts '~/.git-credentials found, copying on vm'
			config.vm.provision "file", source: File.expand_path("~/.git-credentials"), destination: "~/.git-credentials"
		else
			puts '~/.git-credentials not found, skipping'
		end
		#
		puts 'executing provision/shell/force.bash.color.sh...'
		config.vm.provision "shell", path: "provision/shell/force.bash.color.sh"
		#
		#
		#
		puts 'setting public network ip: 192.168.1.12...'
		config.vm.network :public_network, ip: "192.168.1.12"
		#
		#
		#
		$script = <<-SCRIPT
			echo inline shell: checking nfs-common...
			dpkg -l | grep nfs-common && {
				echo nfs-common already installed, skipping
			} || {
				echo installing nfs-common
				apt install -y nfs-common
			}
		SCRIPT
		config.vm.provision "shell", inline: $script
		########################################################################
		#
		# private provisioning
		#
		########################################################################
		if File.exists?(".provision/shell/mount.sh")
			puts '.provision/shell/mount.sh found, executing...'
			config.vm.provision "shell", path: ".provision/shell/mount.sh"
		else
			puts '.provision/shell/mount.sh not found'
		end
		#
		#	https://stackoverflow.com/questions/13453287/check-if-a-file-exists-using-a-wildcard
		#	!Dir.glob('/folderOfFile/Filename*.ext').empty?
		#
		#	https://alvinalexander.com/blog/post/ruby/ruby-how-process-each-file-directory-name-pattern
		#	Dir.glob("*.WMA") {|filename|
		#
		if File.exists?(".provision/copy/home/vagrant/.ssh/id_rsa.pub")
			puts '.provision/copy/home/vagrant/.ssh/id_rsa.pub found, executing...'
			$script = <<-SCRIPT
				echo inline shell: rm vm.pub...
				rm ~vagrant/.ssh/vm.pub
			SCRIPT
			config.vm.provision "shell", inline: $script
			
			config.vm.provision "file", source: ".provision/copy/home/vagrant/.ssh/id_rsa.pub", destination: "~vagrant/.ssh/vm.pub"
			
			$script = <<-SCRIPT
				echo inline shell: check vm.pub...
				if [ -f ~vagrant/.ssh/vm.pub ]
				then
					if ! grep -q "$(cat ~vagrant/.ssh/vm.pub)" ~vagrant/.ssh/authorized_keys
					then
						echo appending key
						cat ~vagrant/.ssh/vm.pub >> ~vagrant/.ssh/authorized_keys
						cat ~vagrant/.ssh/authorized_keys
					else
						echo key already appended
					fi
				fi
			SCRIPT
			config.vm.provision "shell", inline: $script
		else
			puts '.provision/copy/home/vagrant/.ssh/id_rsa.pub not found'
		end
		########################################################################
		#
		# /private provisioning
		#
		########################################################################












# Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
